const { Client } = require("@notionhq/client")
require("dotenv").config()

const notion = new Client({
  auth: process.env.NOTION_TOKEN,
})

// V√≠ d·ª• 1: L·∫•y d·ªØ li·ªáu theo Status (ph·ªï bi·∫øn nh·∫•t cho board view)
async function getBoardViewByStatus() {
  console.log("üéØ V√≠ d·ª• 1: Board View theo Status")
  console.log("=".repeat(40))
  
  try {
    const response = await notion.databases.query({
      database_id: process.env.DATABASE_ID,
      sorts: [
        {
          property: 'Status',
          direction: 'ascending'
        }
      ]
    })
    
    // Group theo Status
    const groupedByStatus = {}
    response.results.forEach(page => {
      const status = page.properties.Status?.status?.name || "No Status"
      if (!groupedByStatus[status]) {
        groupedByStatus[status] = []
      }
      groupedByStatus[status].push(page)
    })
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    Object.entries(groupedByStatus).forEach(([status, items]) => {
      console.log(`\nüìã ${status} (${items.length} items):`)
      items.forEach((item, index) => {
        const title = item.properties.Name?.title[0]?.plain_text || 
                     item.properties.Title?.title[0]?.plain_text || 
                     "Untitled"
        console.log(`  ${index + 1}. ${title}`)
      })
    })
    
  } catch (error) {
    console.error("‚ùå L·ªói:", error.message)
  }
}

// V√≠ d·ª• 2: L·∫•y d·ªØ li·ªáu v·ªõi filter c·ª• th·ªÉ
async function getBoardViewWithFilter() {
  console.log("\nüéØ V√≠ d·ª• 2: Board View v·ªõi Filter")
  console.log("=".repeat(40))
  
  try {
    // Filter ch·ªâ l·∫•y c√°c task c√≥ Priority cao
    const response = await notion.databases.query({
      database_id: process.env.DATABASE_ID,
      filter: {
        property: 'Priority',
        select: {
          equals: 'High'
        }
      }
    })
    
    console.log(`üìä T√¨m th·∫•y ${response.results.length} tasks c√≥ Priority High`)
    
    response.results.forEach((item, index) => {
      const title = item.properties.Name?.title[0]?.plain_text || 
                   item.properties.Title?.title[0]?.plain_text || 
                   "Untitled"
      const status = item.properties.Status?.status?.name || "No Status"
      console.log(`${index + 1}. ${title} - Status: ${status}`)
    })
    
  } catch (error) {
    console.error("‚ùå L·ªói:", error.message)
  }
}

// V√≠ d·ª• 3: L·∫•y d·ªØ li·ªáu theo Date range
async function getBoardViewByDateRange() {
  console.log("\nüéØ V√≠ d·ª• 3: Board View theo Date Range")
  console.log("=".repeat(40))
  
  try {
    const today = new Date()
    const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000)
    
    const response = await notion.databases.query({
      database_id: process.env.DATABASE_ID,
      filter: {
        and: [
          {
            property: 'Due Date',
            date: {
              on_or_after: today.toISOString().split('T')[0]
            }
          },
          {
            property: 'Due Date',
            date: {
              on_or_before: nextWeek.toISOString().split('T')[0]
            }
          }
        ]
      },
      sorts: [
        {
          property: 'Due Date',
          direction: 'ascending'
        }
      ]
    })
    
    console.log(`üìÖ Tasks due trong 7 ng√†y t·ªõi: ${response.results.length}`)
    
    response.results.forEach((item, index) => {
      const title = item.properties.Name?.title[0]?.plain_text || 
                   item.properties.Title?.title[0]?.plain_text || 
                   "Untitled"
      const dueDate = item.properties['Due Date']?.date?.start || "No due date"
      console.log(`${index + 1}. ${title} - Due: ${dueDate}`)
    })
    
  } catch (error) {
    console.error("‚ùå L·ªói:", error.message)
  }
}

// V√≠ d·ª• 4: L·∫•y d·ªØ li·ªáu v·ªõi multiple filters
async function getBoardViewWithMultipleFilters() {
  console.log("\nüéØ V√≠ d·ª• 4: Board View v·ªõi Multiple Filters")
  console.log("=".repeat(40))
  
  try {
    const response = await notion.databases.query({
      database_id: process.env.DATABASE_ID,
      filter: {
        and: [
          {
            property: 'Status',
            status: {
              does_not_equal: 'Done'
            }
          },
          {
            property: 'Priority',
            select: {
              does_not_equal: 'Low'
            }
          }
        ]
      },
      sorts: [
        {
          property: 'Priority',
          direction: 'descending'
        },
        {
          property: 'Name',
          direction: 'ascending'
        }
      ]
    })
    
    console.log(`üöÄ Active tasks v·ªõi Priority cao: ${response.results.length}`)
    
    // Group theo Priority
    const groupedByPriority = {}
    response.results.forEach(page => {
      const priority = page.properties.Priority?.select?.name || "No Priority"
      if (!groupedByPriority[priority]) {
        groupedByPriority[priority] = []
      }
      groupedByPriority[priority].push(page)
    })
    
    Object.entries(groupedByPriority).forEach(([priority, items]) => {
      console.log(`\nüî• ${priority} Priority (${items.length} items):`)
      items.forEach((item, index) => {
        const title = item.properties.Name?.title[0]?.plain_text || 
                     item.properties.Title?.title[0]?.plain_text || 
                     "Untitled"
        const status = item.properties.Status?.status?.name || "No Status"
        console.log(`  ${index + 1}. ${title} - ${status}`)
      })
    })
    
  } catch (error) {
    console.error("‚ùå L·ªói:", error.message)
  }
}

// V√≠ d·ª• 5: L·∫•y d·ªØ li·ªáu v·ªõi pagination
async function getBoardViewWithPagination() {
  console.log("\nüéØ V√≠ d·ª• 5: Board View v·ªõi Pagination")
  console.log("=".repeat(40))
  
  try {
    let allResults = []
    let hasMore = true
    let startCursor = undefined
    
    while (hasMore) {
      const response = await notion.databases.query({
        database_id: process.env.DATABASE_ID,
        start_cursor: startCursor,
        page_size: 10 // L·∫•y 10 items m·ªói l·∫ßn
      })
      
      allResults = allResults.concat(response.results)
      hasMore = response.has_more
      startCursor = response.next_cursor
      
      console.log(`üìÑ ƒê√£ l·∫•y ${allResults.length} items...`)
    }
    
    console.log(`\nüìä T·ªïng c·ªông: ${allResults.length} items`)
    
    // Group theo Status
    const groupedByStatus = {}
    allResults.forEach(page => {
      const status = page.properties.Status?.status?.name || "No Status"
      if (!groupedByStatus[status]) {
        groupedByStatus[status] = []
      }
      groupedByStatus[status].push(page)
    })
    
    Object.entries(groupedByStatus).forEach(([status, items]) => {
      console.log(`\nüìã ${status}: ${items.length} items`)
    })
    
  } catch (error) {
    console.error("‚ùå L·ªói:", error.message)
  }
}

// Ch·∫°y t·∫•t c·∫£ v√≠ d·ª•
async function runAllExamples() {
  console.log("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y c√°c v√≠ d·ª• Board View...\n")
  
  await getBoardViewByStatus()
  await getBoardViewWithFilter()
  await getBoardViewByDateRange()
  await getBoardViewWithMultipleFilters()
  await getBoardViewWithPagination()
  
  console.log("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ v√≠ d·ª•!")
}

// Export functions
module.exports = {
  getBoardViewByStatus,
  getBoardViewWithFilter,
  getBoardViewByDateRange,
  getBoardViewWithMultipleFilters,
  getBoardViewWithPagination,
  runAllExamples
}

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c execute tr·ª±c ti·∫øp
if (require.main === module) {
  runAllExamples()
    .catch(error => {
      console.error("‚ùå C√≥ l·ªói x·∫£y ra:", error)
      process.exit(1)
    })
} 